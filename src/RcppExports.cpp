// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <RcppThread.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// svinecop_create_cpp
Rcpp::List svinecop_create_cpp(const Rcpp::List& svine_r);
RcppExport SEXP _svines_svinecop_create_cpp(SEXP svine_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type svine_r(svine_rSEXP);
    rcpp_result_gen = Rcpp::wrap(svinecop_create_cpp(svine_r));
    return rcpp_result_gen;
END_RCPP
}
// svinecop_select_cpp
Rcpp::List svinecop_select_cpp(const Eigen::MatrixXd& data, size_t p, const std::vector<std::string>& var_types, const std::vector<size_t>& out_vertices, const std::vector<size_t>& in_vertices, bool is_structure_provided, Rcpp::List& structure, const std::vector<std::string>& family_set, std::string par_method, std::string nonpar_method, double mult, int trunc_lvl, std::string tree_criterion, double threshold, std::string selection_criterion, const Eigen::VectorXd& weights, double psi0, bool select_trunc_lvl, bool select_threshold, bool preselect_families, bool show_trace, size_t num_threads);
RcppExport SEXP _svines_svinecop_select_cpp(SEXP dataSEXP, SEXP pSEXP, SEXP var_typesSEXP, SEXP out_verticesSEXP, SEXP in_verticesSEXP, SEXP is_structure_providedSEXP, SEXP structureSEXP, SEXP family_setSEXP, SEXP par_methodSEXP, SEXP nonpar_methodSEXP, SEXP multSEXP, SEXP trunc_lvlSEXP, SEXP tree_criterionSEXP, SEXP thresholdSEXP, SEXP selection_criterionSEXP, SEXP weightsSEXP, SEXP psi0SEXP, SEXP select_trunc_lvlSEXP, SEXP select_thresholdSEXP, SEXP preselect_familiesSEXP, SEXP show_traceSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< size_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type var_types(var_typesSEXP);
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type out_vertices(out_verticesSEXP);
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type in_vertices(in_verticesSEXP);
    Rcpp::traits::input_parameter< bool >::type is_structure_provided(is_structure_providedSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type structure(structureSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type family_set(family_setSEXP);
    Rcpp::traits::input_parameter< std::string >::type par_method(par_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type nonpar_method(nonpar_methodSEXP);
    Rcpp::traits::input_parameter< double >::type mult(multSEXP);
    Rcpp::traits::input_parameter< int >::type trunc_lvl(trunc_lvlSEXP);
    Rcpp::traits::input_parameter< std::string >::type tree_criterion(tree_criterionSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::string >::type selection_criterion(selection_criterionSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type psi0(psi0SEXP);
    Rcpp::traits::input_parameter< bool >::type select_trunc_lvl(select_trunc_lvlSEXP);
    Rcpp::traits::input_parameter< bool >::type select_threshold(select_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type preselect_families(preselect_familiesSEXP);
    Rcpp::traits::input_parameter< bool >::type show_trace(show_traceSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(svinecop_select_cpp(data, p, var_types, out_vertices, in_vertices, is_structure_provided, structure, family_set, par_method, nonpar_method, mult, trunc_lvl, tree_criterion, threshold, selection_criterion, weights, psi0, select_trunc_lvl, select_threshold, preselect_families, show_trace, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// svinecop_loglik_cpp
double svinecop_loglik_cpp(const Eigen::MatrixXd& u, const Rcpp::List& svinecop_r, size_t cores);
RcppExport SEXP _svines_svinecop_loglik_cpp(SEXP uSEXP, SEXP svinecop_rSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type svinecop_r(svinecop_rSEXP);
    Rcpp::traits::input_parameter< size_t >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(svinecop_loglik_cpp(u, svinecop_r, cores));
    return rcpp_result_gen;
END_RCPP
}
// svinecop_sim_cpp
Eigen::MatrixXd svinecop_sim_cpp(const Rcpp::List& svinecop_r, const size_t n, const size_t rep, const Eigen::MatrixXd& data, const bool qrng, const size_t cores, const std::vector<int>& seeds);
RcppExport SEXP _svines_svinecop_sim_cpp(SEXP svinecop_rSEXP, SEXP nSEXP, SEXP repSEXP, SEXP dataSEXP, SEXP qrngSEXP, SEXP coresSEXP, SEXP seedsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type svinecop_r(svinecop_rSEXP);
    Rcpp::traits::input_parameter< const size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const size_t >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const bool >::type qrng(qrngSEXP);
    Rcpp::traits::input_parameter< const size_t >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type seeds(seedsSEXP);
    rcpp_result_gen = Rcpp::wrap(svinecop_sim_cpp(svinecop_r, n, rep, data, qrng, cores, seeds));
    return rcpp_result_gen;
END_RCPP
}
// svinecop_pseudo_residuals_cpp
Eigen::MatrixXd svinecop_pseudo_residuals_cpp(const Eigen::MatrixXd& u, const Rcpp::List& svinecop_r, const size_t num_threads);
RcppExport SEXP _svines_svinecop_pseudo_residuals_cpp(SEXP uSEXP, SEXP svinecop_rSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type svinecop_r(svinecop_rSEXP);
    Rcpp::traits::input_parameter< const size_t >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(svinecop_pseudo_residuals_cpp(u, svinecop_r, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// svinecop_scores_cpp
Eigen::MatrixXd svinecop_scores_cpp(const Eigen::MatrixXd& u, const Rcpp::List& svinecop_r, const size_t num_threads);
RcppExport SEXP _svines_svinecop_scores_cpp(SEXP uSEXP, SEXP svinecop_rSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type svinecop_r(svinecop_rSEXP);
    Rcpp::traits::input_parameter< const size_t >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(svinecop_scores_cpp(u, svinecop_r, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// svinecop_hessian_cpp
Eigen::MatrixXd svinecop_hessian_cpp(const Eigen::MatrixXd& u, const Rcpp::List& svinecop_r, const size_t num_threads);
RcppExport SEXP _svines_svinecop_hessian_cpp(SEXP uSEXP, SEXP svinecop_rSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type svinecop_r(svinecop_rSEXP);
    Rcpp::traits::input_parameter< const size_t >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(svinecop_hessian_cpp(u, svinecop_r, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// with_parameters_cop_cpp
Rcpp::List with_parameters_cop_cpp(const Rcpp::List& svinecop_r, const Eigen::VectorXd parameters);
RcppExport SEXP _svines_with_parameters_cop_cpp(SEXP svinecop_rSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type svinecop_r(svinecop_rSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(with_parameters_cop_cpp(svinecop_r, parameters));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_svines_svinecop_create_cpp", (DL_FUNC) &_svines_svinecop_create_cpp, 1},
    {"_svines_svinecop_select_cpp", (DL_FUNC) &_svines_svinecop_select_cpp, 22},
    {"_svines_svinecop_loglik_cpp", (DL_FUNC) &_svines_svinecop_loglik_cpp, 3},
    {"_svines_svinecop_sim_cpp", (DL_FUNC) &_svines_svinecop_sim_cpp, 7},
    {"_svines_svinecop_pseudo_residuals_cpp", (DL_FUNC) &_svines_svinecop_pseudo_residuals_cpp, 3},
    {"_svines_svinecop_scores_cpp", (DL_FUNC) &_svines_svinecop_scores_cpp, 3},
    {"_svines_svinecop_hessian_cpp", (DL_FUNC) &_svines_svinecop_hessian_cpp, 3},
    {"_svines_with_parameters_cop_cpp", (DL_FUNC) &_svines_with_parameters_cop_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_svines(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
